#include "Utility.h"

int main(int argc, char** argv) {
    if (argc < 2)
    {
        std::cout << "Not enough arguments passed into the generator!" << std::endl;
        return 0;
    }
    if (argv[1] == UBT::toLower("--help"))
    {
        std::cout << "UVKBuildTool - The universal Untitled Vulkan Game Engine file generator" << std::endl;
        std::cout << "  --generate - generate autogenerated files for your project" << std::endl;
        std::cout << "  --help - this help message" << std::endl;
        std::cout << "Commands bellow this line, generate project files, with the first argument specifying the type and the second the name!" << std::endl;
        std::cout << "  --actor <name>" << std::endl;
        std::cout << "  --pawn <name>" << std::endl;
        std::cout << "  --game-mode <name>" << std::endl;
        std::cout << "  --game-state <name>" << std::endl;
        std::cout << "  --player-state <name>" << std::endl;
        std::cout << "  --player-controller <name>" << std::endl;
        std::cout << "  --game-instance <name>" << std::endl;
        std::cout << "  --level <name>" << std::endl;
        std::cout << "UVKBuild tool, made by MadLad Squad, developed and maintained by Stanislav Vasilev(Madman10K)" << std::endl;
        return 0;
    }

    YAML::Node config;

    try
    {
        config = YAML::LoadFile("../../uvproj.yaml");
    }
    catch (YAML::BadFile&)
    {
        std::cout << "Could not locate file" << std::endl;
    }

    if (argv[1] == UBT::toLower("--generate"))
    {
        bool bStartupLevelExists = false;
        const char* name;
        const char* startupLevelName;

        if (config["startup-level-exists"])
        {
            bStartupLevelExists = config["startup-level-exists"].as<bool>();
        }

        if (config["startup-level"])
        {
            startupLevelName = config["startup-level"].as<std::string>().c_str();
        }

        if (config["name"])
        {
            name = config["name"].as<std::string>().c_str();
        }

        UBT::GenerateFiles(bStartupLevelExists, startupLevelName, name);

        return 0;
    }

    if (argc < 3)
    {
        std::cout << "Not enough arguments passed into the generator!" << std::endl;
        return 0;
    }
    else
    {
        if (argv[1] == UBT::toLower("--actor"))
        {
            UBT::makeTemplate(std::string(argv[2]), "UVK::ScriptableObject");
            return 0;
        }
        else if (argv[1] == UBT::toLower("--pawn"))
        {
            UBT::makeTemplate(std::string(argv[2]), "UVK::APawn");
            return 0;
        }
        else if (argv[1] == UBT::toLower("--game-mode"))
        {
            UBT::makeTemplate(std::string(argv[2]), "UVK::GameMode");
            return 0;
        }
        else if (argv[1] == UBT::toLower("--game-state"))
        {
            UBT::makeTemplate(std::string(argv[2]), "UVK::GameState");
            return 0;
        }
        else if (argv[1] == UBT::toLower("--player-state"))
        {
            UBT::makeTemplate(std::string(argv[2]), "UVK::PlayerState");
            return 0;
        }
        else if (argv[1] == UBT::toLower("--player-controller"))
        {
            UBT::makeTemplate(std::string(argv[2]), "UVK::PlayerController");
            return 0;
        }
        else if (argv[1] == UBT::toLower("--game-instance"))
        {
            UBT::makeTemplate(std::string(argv[2]), "UVK::GameInstance");
            return 0;
        }
        else if (argv[1] == UBT::toLower("--level"))
        {
            UBT::makeTemplate(std::string(argv[2]), "UVK::Level");
            return 0;
        }
    }
}
