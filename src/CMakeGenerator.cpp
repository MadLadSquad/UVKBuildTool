#include "CMakeGenerator.hpp"

void UBT::generateCmake(const char* name)
{
    auto stream = std::ofstream(path + static_cast<std::string>("CMakeLists.txt"));
    stream << R"(
cmake_minimum_required(VERSION 3.19)

if (APPLE)
    message(FATAL_ERROR "You're currently working on an Apple machine! Apple and their platforms are not supported, if
you wish to help with adding support for apple devices, please do a pull request on the main engine repository as well
as on the UVKBuildTool repository(this file is generated by it!) and consider maintaining the apple builds!")
endif()

project(UntitledVulkanGameEngine)
project(Modlib)
)" << std::endl;
    stream << "project(" << name << "Lib)" << std::endl;
    stream << "project(" << name << "Modded)" << std::endl;
    stream << "project(" << name << ")" << std::endl;

    // Basically everything that can be directly copy/pasted
    stream << R"(
set(CMAKE_CXX_STANDARD 20)

# Adding subdirectories so that we can consume the libraries
add_subdirectory(Engine/ThirdParty/glm/)
add_subdirectory(Engine/ThirdParty/glfw/)
add_subdirectory(Engine/ThirdParty/vulkan/headers/)
add_subdirectory(Engine/ThirdParty/glew/)
add_subdirectory(Engine/ThirdParty/entt/)
add_subdirectory(Engine/ThirdParty/assimp)

set(YAML_BUILD_SHARED_LIBS ON)
add_subdirectory(Engine/ThirdParty/yaml/)
set(BUILD_SHARED_LIBS ON)
add_subdirectory(Engine/ThirdParty/freetype)
set(BUILD_SHARED_LIBS OFF)
if(MINGW)
else()
    add_subdirectory(Engine/ThirdParty/openal/)
endif()

# Added linking directories because we're using out custom ones and we don't want to pollute path
link_directories(Engine/ThirdParty/vulkan/)
link_directories(Engine/ThirdParty/vulkan/lib)
link_directories(Engine/ThirdParty/glew/lib)

# Include directories for everything really
include_directories(Engine/ThirdParty/assimp/include)
include_directories(.)
include_directories(Engine/)
include_directories(Engine/ThirdParty/entt/src/entt)
include_directories(Engine/Core/)
include_directories(Engine/ThirdParty/glm)
include_directories(Engine/ThirdParty/)
include_directories(Engine/ThirdParty/imguiex/imguizmo)
include_directories(Engine/ThirdParty/glew/include)
include_directories(Engine/ThirdParty/yaml/include)
include_directories(Engine/ThirdParty/yaml/include/yaml-cpp)
include_directories(Engine/ThirdParty/logger/)
include_directories(Engine/ThirdParty/urll/)
include_directories(Source/)
include_directories(Engine/ThirdParty/imgui/backends/everything/)
include_directories(Engine/ThirdParty/imgui/backends/Vulkan/)
include_directories(Engine/ThirdParty/imgui/misc/)
include_directories(Engine/ThirdParty/glfw/include/GLFW/)
include_directories(Engine/ThirdParty/vulkan/headers/include)
include_directories(Engine/ThirdParty/freetype/include)
if(WIN32)
    include_directories(Engine/ThirdParty/stb)
else()
    include_directories(Engine/ThirdParty)
endif()
# Source code of the engine
file(GLOB_RECURSE EngineSrc "Engine/Audio/*.cpp" "Engine/Audio/*.hpp" "Engine/Core/*.cpp" "Engine/Core/*.hpp"
        "Engine/Renderer/*.hpp" "Engine/Renderer/*.cpp" "Engine/GameFramework/*.cpp" "Engine/GameFramework/*.hpp"
        "Engine/ThirdParty/imgui/backends/everything/*.cpp" "Engine/ThirdParty/imgui/misc/*.cpp" "Engine/ThirdParty/imgui/misc/*.h"
        "Engine/ThirdParty/imgui/backends/everything/*.h" "Engine/ThirdParty/imgui/backends/Vulkan/*.h" "Engine/ThirdParty/imgui/backends/Vulkan/*.cpp"
        "Engine/ThirdParty/imguiex/*.cpp" "Engine/ThirdParty/imguiex/*.h" "Generated/*.hpp" "Engine/ThirdParty/logger/*.h"
        "Engine/ThirdParty/logger/*.cpp")

# The headers of the engine library
file(GLOB_RECURSE EngineHeaders "Engine/Audio/*.hpp" "Engine/Core/*.hpp" "Engine/Renderer/*.hpp" "Engine/GameFramework/*.hpp"
        "Engine/GameFramework/*.hpp" "Engine/ThirdParty/imgui/misc/*.h" "Engine/ThirdParty/imgui/backends/everything/*.h"
        "Engine/ThirdParty/imgui/backends/Vulkan/*.h" "Engine/ThirdParty/imguiex/*.h" "Generated/*.hpp"
        "Engine/ThirdParty/logger/*.h")

# The source code for the executable
file(GLOB_RECURSE ExecutableSrc "WrapperSource/*.cpp" "WrapperSource/*.hpp")

# Headers to precompile
file(GLOB_RECURSE PrecompileEngineHeaders "Engine/Core/Core/STL.hpp" "Engine/ThirdParty/glm/glm/glm.hpp"
"Engine/ThirdParty/stb/*.h" "Engine/ThirdParty/yaml/include/yaml-cpp/*.h" "Engine/ThirdParty/glm/glm/*.h"
"Engine/ThirdParty/logger/UVKLog.h" "Engine/ThirdParty/yaml/include/yaml-cpp/*.hpp"
"Engine/ThirdParty/entt/*.h" "Engine/ThirdParty/freetype/include/freetype/freetype.h"
"Engine/ThirdParty/vulkan/headers/include/vulkan/vulkan.h")
)" << std::endl;

    stream << "file(GLOB_RECURSE " << name << "Src \"Source/*.hpp\" \"Source/*.cpp\")" << std::endl;
    stream << R"(if(WIN32)
    add_library(UntitledVulkanGameEngine SHARED Engine/ThirdParty/stb/stb_image.h Engine/ThirdParty/stb/sndfile.h ${EngineSrc})
)" << std::endl;
    stream << "    add_library(" << name << R"(Lib  SHARED ${GameSrc} Engine/ThirdParty/stb/stb_image.h Engine/ThirdParty/stb/sndfile.h ${EngineHeaders})
else()
    add_library(UntitledVulkanGameEngine SHARED Engine/ThirdParty/stb/stb_image.h ${EngineSrc})
)" << "    add_library(" << name << R"(Lib SHARED ${GameSrc} Engine/ThirdParty/stb/stb_image.h ${EngineHeaders})
endif()

add_library(Modlib SHARED Generated/ModEmpty.cpp Generated/ModEmpty.hpp)

# Add the executable for the normal and modded game)" << std::endl;
    stream << "add_executable(" << name << R"( ${ExecutableSrc} "Generated/main.cpp")
add_executable()" << name << R"(Modded  ${ExecutableSrc} "Generated/mainmodded.cpp" "Engine/ThirdParty/urll/urll.h" "Engine/ThirdParty/urll/urll.cpp")

target_precompile_headers(UntitledVulkanGameEngine PRIVATE ${PrecompileEngineHeaders})
set_target_properties(UntitledVulkanGameEngine PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(Modlib PROPERTIES LINKER_LANGUAGE CXX))" << std::endl;
    stream << "set_target_properties(" << name << R"(Lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties()" << name << R"( PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties()" << name << R"(Modded PROPERTIES LINKER_LANGUAGE CXX))" << std::endl;

    stream << "target_compile_definitions(" << name << R"(Modded PRIVATE "UVK_COMPILING_WITH_MODS" "URLL_USE_FUNCTIONAL")
if (WIN32)
    if (MINGW)
        target_compile_options(UntitledVulkanGameEngine PRIVATE "-O3" "-march=native")
        target_link_libraries(UntitledVulkanGameEngine glfw opengl32 libglew_static yaml-cpp vulkan-1 assimp freetype)

        target_compile_options(Modlib PRIVATE "-O3" "-march=native")
        target_link_libraries(Modlib)

        target_compile_options()" << name << R"(Lib PRIVATE "-O3" "-march=native")
        target_link_libraries()" << name << R"(Lib UntitledVulkanGameEngine)

        target_compile_options()" << name << R"( PRIVATE "-O3" "-march=native")
        target_link_libraries()" << name << " " << name << R"(Lib UntitledVulkanGameEngine)

        target_compile_options()" << name << R"(Modded PRIVATE "-O3" "-march=native")
        target_link_libraries()" << name << R"(Modded )" << name << R"(Lib UntitledVulkanGameEngine dl)
    else()
        target_compile_options(UntitledVulkanGameEngine PRIVATE "/O2bi" "/arch:AVX2")
        target_link_libraries(UntitledVulkanGameEngine glfw OpenAL opengl32 libglew_static yaml-cpp vulkan-1 sndfile assimp freetype)

        target_compile_options(Modlib PRIVATE "/O2bi" "/arch:AVX2")
        target_link_libraries(Modlib)

        target_compile_options()" << name << R"(Lib PRIVATE "/O2bi" "/arch:AVX2")
        target_link_libraries()" << name << R"(Lib UntitledVulkanGameEngine)

        target_compile_options()" << name << R"( PRIVATE "/O2bi" "/arch:AVX2")
        target_link_libraries()" << name << " " << name << R"(Lib UntitledVulkanGameEngine)

        target_compile_options()" << name << R"(Modded PRIVATE "/O2bi" "/arch:AVX2")
        target_link_libraries()" << name << "Modded " << name << R"(Lib UntitledVulkanGameEngine dl)
    endif()
else()
    target_compile_options(UntitledVulkanGameEngine PRIVATE "-O3" "-march=native")
    target_link_libraries(UntitledVulkanGameEngine glfw GLEW OpenGL OpenAL yaml-cpp vulkan sndfile util pthread assimp freetype)

    target_compile_options(Modlib PRIVATE "-O3" "-march=native")
    target_link_libraries(Modlib)

    target_compile_options()" << name << R"(Lib PRIVATE "-O3" "-march=native")
    target_link_libraries()" << name << R"(Lib UntitledVulkanGameEngine)

    target_compile_options()" << name << R"( PRIVATE "-O3" "-march=native")
    target_link_libraries()" << name << " " << name << R"(Lib UntitledVulkanGameEngine)

    target_compile_options()" << name << R"(Modded PRIVATE "-O3" "-march=native")
    target_link_libraries()" << name << "Modded " << name << R"( UntitledVulkanGameEngine dl)
endif())" << std::endl;

    stream.close();
}
