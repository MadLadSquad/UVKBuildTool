cmake_minimum_required(VERSION 3.19)

if (APPLE)
    message(FATAL_ERROR "You're currently working on an Apple machine! Apple and their platforms are not supported, if
you wish to help with adding support for apple devices, please do a pull request on the main engine repository as well
as on the UVKBuildTool repository(this file is generated by it!) and consider maintaining the apple builds!")
endif()
project(UntitledVulkanGameEngine)
project(Modlib)
project(${{name}}Modded)
project(${{name}})

set(CMAKE_CXX_STANDARD 20)
# Adding subdirectories so that we can consume the libraries
add_subdirectory(Engine/ThirdParty/glm/)
add_subdirectory(Engine/ThirdParty/glfw/)
add_subdirectory(Engine/ThirdParty/vulkan/headers/)
add_subdirectory(Engine/ThirdParty/glew/)
add_subdirectory(Engine/ThirdParty/entt/)
add_subdirectory(Engine/ThirdParty/assimp)

set(BUILD_SHARED_LIBS ON)
add_subdirectory(Engine/ThirdParty/yaml/)
add_subdirectory(Engine/ThirdParty/freetype)
set(BUILD_SHARED_LIBS OFF)
if(MINGW)
else()
    add_subdirectory(Engine/ThirdParty/openal/)
endif()

# Added linking directories because we're using out custom ones and we don't want to pollute path
link_directories("Engine/ThirdParty/vulkan/" "Engine/ThirdParty/vulkan/lib" "Engine/ThirdParty/glew/lib" "UVKBuildTool/build/"
"UVKShaderCompiler/build/")

# Include directories for everything really
include_directories("Engine/ThirdParty/assimp/include" "." "Engine/" "Engine/ThirdParty/entt/src/entt" "Engine/Core/"
"Engine/ThirdParty/glm" "Engine/ThirdParty/" "Engine/ThirdParty/imguiex/imguizmo" "Engine/ThirdParty/glew/include"
"Engine/ThirdParty/yaml/include" "Engine/ThirdParty/yaml/include/yaml-cpp" "Engine/ThirdParty/uvklog/src/"
"Engine/ThirdParty/urll/" "Source/" "Engine/ThirdParty/imgui/backends/everything/" "Engine/ThirdParty/imgui/backends/Vulkan/"
"Engine/ThirdParty/glfw/include/GLFW/" "Engine/ThirdParty/imgui/misc/" "Engine/ThirdParty/vulkan/headers/include"
"Engine/ThirdParty/freetype/include")

if(WIN32)
    include_directories(Engine/ThirdParty/stb)
    ${{extra_include_directories_win32}}
    ${{extra_subdirectories_win32}}
else()
    include_directories(Engine/ThirdParty)
    ${{extra_include_directories_unix}}
    ${{extra_subdirectories_unix}}
endif()

file(GLOB_RECURSE ProjectHeaders "Source/*.hpp")

# Source code of the engine
if(WIN32)
    file(GLOB_RECURSE EngineSrc "Engine/Audio/*.cpp" "Engine/Audio/*.hpp" "Engine/Core/*.cpp" "Engine/Core/*.hpp"
        "Engine/Renderer/*.hpp" "Engine/Renderer/*.cpp" "Engine/GameFramework/*.cpp" "Engine/GameFramework/*.hpp"
        "Engine/ThirdParty/imgui/backends/everything/*.cpp" "Engine/ThirdParty/imgui/misc/*.cpp" "Engine/ThirdParty/imgui/misc/*.h"
        "Engine/ThirdParty/imgui/backends/everything/*.h" "Engine/ThirdParty/imgui/backends/Vulkan/*.h" "Engine/ThirdParty/imgui/backends/Vulkan/*.cpp"
        "Engine/ThirdParty/imguiex/*.cpp" "Engine/ThirdParty/imguiex/*.h" "Engine/ThirdParty/imguiex/*.hpp" "Generated/*.hpp" "Engine/ThirdParty/uvklog/*.h"
        "Engine/ThirdParty/uvklog/*.cpp" ${{win32_additional_sources}} )
    # The headers of the engine library
    file(GLOB_RECURSE EngineHeaders "Engine/Audio/*.hpp" "Engine/Core/*.hpp" "Engine/Renderer/*.hpp" "Engine/GameFramework/*.hpp"
        "Engine/GameFramework/*.hpp" "Engine/ThirdParty/imgui/misc/*.h" "Engine/ThirdParty/imgui/backends/everything/*.h"
        "Engine/ThirdParty/imgui/backends/Vulkan/*.h" "Engine/ThirdParty/imguiex/*.h" "Engine/ThirdParty/imguiex/*.hpp" "Generated/*.hpp"
        "Engine/ThirdParty/uvklog/*.h" "UVKShaderCompiler/Src/*.hpp" "UVKBuildTool/src/*.hpp" ${{win32_additional_headers}} )
    file(GLOB_RECURSE ExecutableSrc "WrapperSource/*.cpp" "WrapperSource/*.hpp" ${{win32_wrapper_sources}} ${{win32_wrapper_headers}} )
else()
    file(GLOB_RECURSE EngineSrc "Engine/Audio/*.cpp" "Engine/Audio/*.hpp" "Engine/Core/*.cpp" "Engine/Core/*.hpp"
        "Engine/Renderer/*.hpp" "Engine/Renderer/*.cpp" "Engine/GameFramework/*.cpp" "Engine/GameFramework/*.hpp"
        "Engine/ThirdParty/imgui/backends/everything/*.cpp" "Engine/ThirdParty/imgui/misc/*.cpp" "Engine/ThirdParty/imgui/misc/*.h"
        "Engine/ThirdParty/imgui/backends/everything/*.h" "Engine/ThirdParty/imgui/backends/Vulkan/*.h" "Engine/ThirdParty/imgui/backends/Vulkan/*.cpp"
        "Engine/ThirdParty/imguiex/*.cpp" "Engine/ThirdParty/imguiex/*.h" "Engine/ThirdParty/imguiex/*.hpp" "Generated/*.hpp" "Engine/ThirdParty/uvklog/*.h"
        "Engine/ThirdParty/uvklog/*.cpp" ${{unix_additional_sources}} )
    # The headers of the engine library
    file(GLOB_RECURSE EngineHeaders "Engine/Audio/*.hpp" "Engine/Core/*.hpp" "Engine/Renderer/*.hpp" "Engine/GameFramework/*.hpp"
        "Engine/GameFramework/*.hpp" "Engine/ThirdParty/imgui/misc/*.h" "Engine/ThirdParty/imgui/backends/everything/*.h"
        "Engine/ThirdParty/imgui/backends/Vulkan/*.h" "Engine/ThirdParty/imguiex/*.h" "Engine/ThirdParty/imguiex/*.hpp" "Generated/*.hpp"
        "Engine/ThirdParty/uvklog/*.h" "UVKShaderCompiler/Src/*.hpp" "UVKBuildTool/src/*.hpp" ${{unix_additional_headers}} )
    file(GLOB_RECURSE ExecutableSrc "WrapperSource/*.cpp" "WrapperSource/*.hpp" ${{unix_wrapper_sources}} ${{unix_wrapper_headers}} )
endif()

# Headers to precompile
file(GLOB_RECURSE PrecompileEngineHeaders "Engine/Core/Core/STL.hpp" "Engine/ThirdParty/glm/glm/glm.hpp"
"Engine/ThirdParty/stb/*.h" "Engine/ThirdParty/yaml/include/yaml-cpp/*.h" "Engine/ThirdParty/glm/glm/*.h"
"Engine/ThirdParty/uvklog/UVKLog.h" "Engine/ThirdParty/yaml/include/yaml-cpp/*.hpp"
"Engine/ThirdParty/entt/*.h" "Engine/ThirdParty/freetype/include/freetype/freetype.h"
"Engine/ThirdParty/vulkan/headers/include/vulkan/vulkan.h")

if(WIN32)
    file(GLOB_RECURSE ProjectSrc "Source/*.hpp" "Source/*.cpp")
    add_library(UntitledVulkanGameEngine SHARED Engine/ThirdParty/stb/stb_image.h Engine/ThirdParty/stb/sndfile.h ${EngineSrc} ${ProjectSrc})
else()
    file(GLOB_RECURSE ProjectSrc "Source/*.hpp" "Source/*.cpp" )
    add_library(UntitledVulkanGameEngine SHARED Engine/ThirdParty/stb/stb_image.h ${EngineSrc} ${ProjectSrc})
endif()

add_library(Modlib SHARED Generated/ModEmpty.cpp Generated/ModEmpty.hpp)

# Add the executable for the normal and modded game
add_executable(${{name}} ${ExecutableSrc} "Generated/main.cpp" "Engine/ThirdParty/urll/urll.h" "Engine/ThirdParty/urll/urll.cpp" ${ProjectHeaders})
if(WIN32)
    add_executable(${{name}}Modded ${ExecutableSrc} "Generated/mainmodded.cpp" "Engine/ThirdParty/urll/urll.h" "Engine/ThirdParty/urll/urll.cpp" ${ProjectHeaders} ${{win32_modded_wrapper_headers}} ${{win32_modded_wrapper_sources}} )
else()
    add_executable(${{name}}Modded ${ExecutableSrc} "Generated/mainmodded.cpp" "Engine/ThirdParty/urll/urll.h" "Engine/ThirdParty/urll/urll.cpp" ${ProjectHeaders} ${{unix_modded_wrapper_headers}} ${{unix_modded_wrapper_sources}} )
endif()

target_precompile_headers(UntitledVulkanGameEngine PRIVATE ${PrecompileEngineHeaders})
set_target_properties(UntitledVulkanGameEngine PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(Modlib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(${{name}} PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(${{name}}Modded PROPERTIES LINKER_LANGUAGE CXX)
target_compile_definitions(${{name}}Modded PRIVATE "UVK_COMPILING_WITH_MODS" "URLL_USE_FUNCTIONAL" "UVK_LOG_EXPORT_FROM_LIBRARY")
target_compile_definitions(${{name}} PRIVATE "UVK_LOG_EXPORT_FROM_LIBRARY")
target_compile_definitions(UntitledVulkanGameEngine PRIVATE "UVK_LIB_COMPILE" "YAML_CPP_DLL" "UBT_TARGET_ENGINE" "UVK_LOG_EXPORT_FROM_LIBRARY" "UVK_LOG_IMGUI" "IMGUI_DEFINE_MATH_OPERATORS")

if (WIN32)
    if (MINGW)
        target_compile_options(UntitledVulkanGameEngine PRIVATE "-O3" "-march=native")
        target_link_libraries(UntitledVulkanGameEngine glfw opengl32 libglew_static yaml-cpp vulkan-1 assimp freetype UVKShaderCompilerLib )

        target_compile_options(Modlib PRIVATE "-O3" "-march=native")
        target_link_libraries(Modlib)

        target_compile_options(${{name}} PRIVATE "-O3" "-march=native")
        target_link_libraries(${{name}} UntitledVulkanGameEngine)

        target_compile_options(${{name}}Modded  PRIVATE "-O3" "-march=native")
        target_link_libraries(${{name}}Modded UntitledVulkanGameEngine)
    else()
        target_compile_options(UntitledVulkanGameEngine PRIVATE "/O2" "/MP" "/Ob2" "/Oi" "/Ot" "/arch:AVX2")
        target_link_libraries(UntitledVulkanGameEngine glfw OpenAL opengl32 libglew_static yaml-cpp vulkan-1 sndfile assimp freetype UVKShaderCompilerLib UVKBuildToolLib ${{win32_engine_link_libraries}} )

        target_compile_options(Modlib PRIVATE "/O2" "/MP" "/Ob2" "/Oi" "/Ot" "/arch:AVX2")
        target_link_libraries(Modlib)

        target_compile_options(${{name}} PRIVATE "/O2" "/Ob2" "/Oi" "/Ot" "/arch:AVX2")
        target_link_libraries(${{name}} UntitledVulkanGameEngine ${{win32_wrapper_link_libraries}} )

        target_compile_options(${{name}}Modded PRIVATE "/O2" "/MP" "/Ob2" "/Oi" "/Ot" "/arch:AVX2")
        target_link_libraries(${{name}}Modded UntitledVulkanGameEngine ${{win32_wrapper_modded_link_libraries}} )
    endif()
else()
    target_compile_options(UntitledVulkanGameEngine PRIVATE "-O3" "-march=native")
    target_link_libraries(UntitledVulkanGameEngine glfw GLEW OpenGL OpenAL yaml-cpp vulkan sndfile util pthread assimp freetype UVKShaderCompilerLib UVKBuildToolLib ${{unix_engine_link_libraries}} )

    target_compile_options(Modlib PRIVATE "-O3" "-march=native")
    target_link_libraries(Modlib)

    target_compile_options(${{name}} PRIVATE "-O3" "-march=native")
    target_link_libraries(${{name}} UntitledVulkanGameEngine ${{unix_wrapper_link_libraries}} )

    target_compile_options(${{name}}Modded PRIVATE "-O3" "-march=native" )
    target_link_libraries(${{name}}Modded UntitledVulkanGameEngine dl ${{unix_wrapper_modded_link_libraries}} )
endif()
